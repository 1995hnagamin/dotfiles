set number
filetype on
filetype indent on
filetype plugin on
syntax on
set autoindent
set smartindent
set ambiwidth=double
set backupdir=~/.vimbackup
set undodir=~/.vimundo
set incsearch
set hlsearch
set splitright
set backspace=indent,eol,start
set updatetime=1000
set autoread
set list
set listchars=eol:~,tab:~-,trail:?,extends:>,precedes:<,nbsp:]
set showtabline=2
set tags=./tags;
augroup CleanBackGround
    autocmd!
    autocmd ColorScheme * highlight Normal ctermbg=none
    autocmd ColorScheme * highlight ErrorMsg ctermbg=none
    autocmd ColorScheme * highlight WarningMsg ctermbg=none
augroup END

command! FullPath echo expand('%:p')

autocmd QuickfixCmdPost make,grep,grepadd,vimgrep copen

"--- Keymap {{{1
nnoremap <ESC><ESC> :noh<CR>

" Tab pages
nmap [Tag] <Nop>
nmap <Space> [Tag]
for s:n in range(1, 9)
    execute 'nnoremap <silent> [Tag]'.s:n  ':<C-u>tabnext'.s:n.'<CR>'
endfor

"End Keymap }}}1

"--- vim-plug {{{1
call plug#begin()
Plug 'itchyny/lightline.vim'
Plug 'mattn/vim-sonictemplate'
call plug#end()
" End vim-plug }}}1

" lightline {{{1
let g:lightline = {
            \ 'colorscheme': 'wombat',
            \ 'active': {
            \   'left': [ ['mode', 'paste'],
            \             ['readonly'] ]
            \ },
            \ 'component': {
            \   'readonly': '%{&readonly?"RO":""}',
            \ },
            \ 'component_visible_condition': {
            \   'readonly': '(&filetype!="help"&& &readonly)',
            \ },
            \ 'separator': { 'left':'','right':'' },
            \ 'subseparator': { 'left':'','right':'' },
            \ }
set laststatus=2
" End lightline }}}1

" sonictemplate-vim {{{1
let g:sonictemplate_vim_template_dir = [
            \ '~/.vim/sonictemplate'
            \]
"End sonictemplate-vim }}}1

if filereadable(expand('~/.vimrc.local'))
    source ~/.vimrc.local
endif
