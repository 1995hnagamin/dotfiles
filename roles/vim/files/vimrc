set number
filetype on
filetype indent on
filetype plugin on
syntax on
set autoindent
set smartindent
set ambiwidth=double
set backupdir=~/.vimbackup
set undodir=~/.vimundo
set incsearch
set hlsearch
set splitright
set backspace=indent,eol,start
set updatetime=1000
set autoread
set list
set listchars=eol:~,tab:~-,trail:?,extends:>,precedes:<,nbsp:]
set showtabline=2
set tags=./tags;
augroup CleanBackGround
    autocmd!
    autocmd ColorScheme * highlight Normal ctermbg=none
    autocmd ColorScheme * highlight ErrorMsg ctermbg=none
    autocmd ColorScheme * highlight WarningMsg ctermbg=none
augroup END
colorscheme elflord

command! -nargs=1 -complete=file Rename f <args>|call delete(expand('#'))
command! FullPath echo expand('%:p')

runtime! ftplugin/man.vim

autocmd QuickfixCmdPost make,grep,grepadd,vimgrep copen

"--- Keymap {{{1
nnoremap <Space>g :GundoToggle<CR>
nnoremap <silent> <Space>p :set invpaste<CR>
nnoremap <Space>t :<C-u>tab stj <C-R>=expand('<cword>')<CR><CR>
nnoremap <Space>Tv :vsp<CR> :exe("tjump ".expand('<cword>'))<CR>
nnoremap <Space>Uf :Unite file<CR>
nnoremap <ESC><ESC> :noh<CR>
nnoremap <silent> <Space>o :execute "normal zczO"<CR>

" Tab pages
nmap [Tag] <Nop>
nmap <Space> [Tag]
for s:n in range(1, 9)
    execute 'nnoremap <silent> [Tag]'.s:n  ':<C-u>tabnext'.s:n.'<CR>'
endfor

"End Keymap }}}1

"--- Plugin {{{1

"dein Scripts {{{2
set runtimepath+=~/.vim/dein/repos/github.com/Shougo/dein.vim

if dein#load_state('~/.vim/dein')
    call dein#begin(expand('~/.vim/dein'))

    let s:toml_dir = $HOME . '/.vim/dein/toml'
    let s:toml = s:toml_dir . '/dein.toml'
    let s:lazy_toml = s:toml_dir . '/dein_lazy.toml'
    call dein#load_toml(s:toml, {'lazy': 0})
    call dein#load_toml(s:lazy_toml, {'lazy': 1})

    call dein#local('~/.local/share/dein_local_plugins')

    " Required:
    call dein#end()
    call dein#save_state()
endif

" Required:
filetype plugin indent on
syntax enable
"End dein Scripts }}}2

" incsearch.vim {{{2
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
" End incsearch.vim }}}2

" neocomplete {{{2
if has('lua')
    let g:neocomplete#enable_at_startup = 1
    let g:neocomplete#enable_ignore_case = 1
    let g:neocomplete#enable_smart_case = 1
    let g:neocomplete#max_list = 8
    let g:neocomplete#min_keyword_length = 3
    if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns = {}
    endif
    let g:neocomplete#keyword_patterns._ = '\h\w*'
    inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"
    inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
    if !exists('g:neocomplete#sources#omni#input_patterns')
        let g:neocomplete#sources#omni#input_patterns = {}
    endif
    let g:neocomplete#sources#omni#input_patterns.tex = '\\ref{\s*[0-9A-Za-z_:]*'
endif

"End neocomplete }}}2

" quickrun.vim {{{2

let g:quickrun_config = {
            \   'make' : {
            \       'command'   : 'make',
            \       'exec' : '%c %o',
            \       'outputter' : 'error:buffer:quickfix',
            \       'runner' : 'vimproc',
            \   },
            \}

"End quickrun.vim }}}2

" ref.vim {{{2
let g:ref_man_cmd = "man -P cat"
let g:ref_man_lang = "C"

let g:ref_source_webdict_sites = {
            \ 'dictionary_com': {
            \     'url': 'http://www.dictionary.com/browse/%s',
            \ },
            \ 'wiktionary': {
            \   'url': 'http://en.wiktionary.org/wiki/%s',
            \   'keyword_encoding': 'utf-8',
            \   'cache': 1,
            \ },
            \ 'default': 'dictionary_com',
            \}
let g:ref_source_webdict_cmd = "=wwwrenderer#render('%s')"

function! g:ref_source_webdict_sites.dictionary_com.filter(output)
    let split_horizon = 2
    let lines = []
    let split_counter = 0
    for line in split(a:output, "\n")[90:]
        let line = substitute(line, "\\s\\+$", "", "")
        if !empty(line)
            let split_counter = 0
            call add(lines, line)
        elseif split_horizon > split_counter
            let split_counter = split_counter + 1
            call add(lines, line)
        endif
    endfor
    return join(lines, "\n")
endfunction

function! g:ref_source_webdict_sites.wiktionary.filter(output)
  return join(split(a:output, "\n")[18 :], "\n")
endfunction

nnoremap <Space>d :call ref#jump("normal", "webdict")<CR>

" End ref.vim }}}2

" sonictemplate-vim {{{2
let g:sonictemplate_vim_template_dir = [
            \ '~/.vim/sonictemplate'
            \]
"End sonictemplate-vim }}}2

" unite.vim
let g:unite_enable_start_insert=1

" watchdogs.vim {{{2
let g:quickrun_config['watchdogs_checker/_'] = {
            \   'outputter/quickfix/open_cmd': '',
            \   'hook/echo/enable': 1,
            \   'hook/echo/output_success': 'Watchdog went away.'
            \ }

let g:quickrun_config['cpp/watchdogs_checker'] = {
            \   'type' : 'watchdogs_checker/clang++',
            \   'cmdopt' : '-std=c++14 -Wall',
            \ }

let g:watchdogs_check_BufWritePost_enable = 1
let g:watchdogs_check_BufWritePost_enables = {
            \   'cpp' : 0
            \ }

let g:watchdogs_check_CursorHold_enable = 1
let g:watchdogs_check_CursorHold_enables = {
            \   'cpp' : 0
            \ }

call watchdogs#setup(g:quickrun_config)

"End watchdogs.vim }}}2

" vim-asterisk {{{2
map *  <Plug>(asterisk-z*)
map #  <Plug>(asterisk-z#)
map g* <Plug>(asterisk-gz*)
map g# <Plug>(asterisk-gz#)
" End vim-asterisk }}}2

" yankround.vim {{{2
nmap gp <Plug>(yankround-gp)
nmap gP <Plug>(yankround-gP)
nmap p <Plug>(yankround-p)
nmap P <Plug>(yankround-P)
nmap yp <Plug>(yankround-prev)
nmap yn <Plug>(yankround-next)
xmap gp <Plug>(yankround-gp)
xmap p <Plug>(yankround-p)
" End yankround.vim }}}2

"End Plugin }}}1

if filereadable(expand('~/.vimrc.local'))
    source ~/.vimrc.local
endif
