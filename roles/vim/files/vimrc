set number
filetype on
filetype indent on
filetype plugin on
syntax on
set autoindent
set smartindent
set ambiwidth=double
set hlsearch
set undofile
set undodir=$HOME/.vim/undodir
set splitright
set backspace=indent,eol,start
set foldmethod=marker
autocmd ColorScheme * highlight Normal ctermbg=none
autocmd ColorScheme * highlight ErrorMsg ctermbg=none
set updatetime=1000
set autoread
set list
set listchars=eol:~,tab:._,trail:#,extends:>,precedes:<,nbsp:]
colorscheme elflord


nnoremap <C-@> :vsp<CR> :exe("tjump ".expand('<cword>'))<CR>
nnoremap <F3> :<C-u>tab stj <C-R>=expand('<cword>')<CR><CR>
nnoremap <ESC><ESC> :noh<CR>

function! s:SID_PREFIX()
  return matchstr(expand('<sfile>'), '<SNR>\d\+_\zeSID_PREFIX$')
endfunction

" show tabline
function! s:my_tabline()
  let s = ''
  for i in range(1, tabpagenr('$'))
    let bufnrs = tabpagebuflist(i)
    let bufnr = bufnrs[tabpagewinnr(i) - 1]
    let no = i
    let mod = getbufvar(bufnr, '&modified') ? '!' : ' '
    let title = fnamemodify(bufname(bufnr), ':t')
    let title = title
    let s .= '%'.i.'T'
    let s .= '%#' . (i == tabpagenr() ? 'TabLineSel' : 'TabLine') . '#'
    let s .= no . ':' . title
    let s .= mod
    let s .= '%#TabLineFill# '
  endfor
  let s .= '%#TabLineFill#%T%=%#TabLine#'
  return s
endfunction
let &tabline = '%!'. s:SID_PREFIX() . 'my_tabline()'
set showtabline=2

nnoremap    [Tag]   <Nop>
nmap    , [Tag]
for n in range(1, 9)
  execute 'nnoremap <silent> [Tag]'.n  ':<C-u>tabnext'.n.'<CR>'
endfor

map <silent> [Tag]c :tablast <bar> tabnew<CR>
map <silent> [Tag]x :tabclose<CR>
map <silent> [Tag]n :tabnext<CR>
map <silent> [Tag]p :tabprevious<CR>

command! -nargs=1 -complete=file Rename f <args>|call delete(expand('#'))

"--- Plugin

"dein Scripts-----------------------------
if &compatible
  set nocompatible               " Be iMproved
endif

set runtimepath+=~/.vim/dein/repos/github.com/Shougo/dein.vim

if dein#load_state('~/.vim/dein')
call dein#begin(expand('~/.vim/dein'))

call dein#add('Shougo/dein.vim')

call dein#add('Shougo/neocomplete.vim')
call dein#add('Shougo/unite-outline')
call dein#add('Shougo/unite.vim')
call dein#add('Shougo/vimproc.vim', {'build': 'make'})

call dein#add('airblade/vim-gitgutter')
call dein#add('bronson/vim-trailing-whitespace')
call dein#add('cohama/vim-hier')
call dein#add('ciaranm/detectindent')
call dein#add('dannyob/quickfixstatus')
call dein#add('itchyny/lightline.vim')
call dein#add('kana/vim-filetype-haskell')
call dein#add('kana/vim-smartinput')
call dein#add('kchmck/vim-coffee-script')
call dein#add('Konfekt/FastFold')
call dein#add('LeafCage/yankround.vim')
call dein#add('mattn/emmet-vim')
call dein#add('mattn/sonictemplate-vim')
call dein#add('osyo-manga/shabadou.vim')
call dein#add('osyo-manga/vim-watchdogs')
call dein#add('rust-lang/rust.vim')
call dein#add('thinca/vim-quickrun')
call dein#add('tpope/vim-fugitive')
call dein#add('tpope/vim-surround')
call dein#add('tyru/skk.vim')
call dein#add('vim-scripts/fcitx.vim')
call dein#add('vim-scripts/Gundo')
call dein#add('vim-scripts/mru.vim')
call dein#add('vim-scripts/vim-auto-save')
call dein#add('vim-scripts/wikipedia.vim')

" Required:
call dein#end()
call dein#save_state()
endif

" Required:
filetype plugin indent on
syntax enable

" If you want to install not installed plugins on startup.
"if dein#check_install()
"  call dein#install()
"endif

"End dein Scripts-------------------------

" fugitive
command! Commit :Gcommit -v
command! Diff :Gvdiff

" Gundo
nnoremap <F5> :GundoToggle<CR>

syntax on

" lightline

let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ ['mode', 'paste'],
      \             ['readonly'] ]
      \ },
      \ 'component': {
      \   'readonly': '%{&readonly?"RO":""}',
      \ },
      \ 'component_visible_condition': {
      \   'readonly': '(&filetype!="help"&& &readonly)',
      \ },
      \ 'separator': { 'left':'','right':'' },
      \ 'subseparator': { 'left':'','right':'' },
      \ }
set laststatus=2

" neocomplete
if has('lua')
  let g:neocomplete#enable_at_startup = 1
  let g:neocomplete#enable_ignore_case = 1
  let g:neocomplete#enable_smart_case = 1
  let g:neocomplete#max_list = 8
  let g:neocomplete#min_keyword_length = 3
  if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
  endif
  let g:neocomplete#keyword_patterns._ = '\h\w*'
  inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
  inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"
  inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
  if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
  endif
  let g:neocomplete#sources#omni#input_patterns.tex = '\\ref{\s*[0-9A-Za-z_:]*'
endif

" quickrun.vim

let g:quickrun_config = {
      \   'make' : {
      \       'command'   : 'mingw32-make',
      \       'exec' : '%c %o',
      \       'outputter' : 'error:buffer:quickfix',
      \       'runner' : 'vimproc',
      \       'hook/cd/enable' : 1,
      \       'hook/cd/directory' : 'D:/test/aaa',
      \   },
      \}

" skk.vim
let skk_jisyo = '~/.skk-jisyo'
let skk_large_jisyo = '/usr/share/skk/SKK-JISYO.L'
let skk_auto_save_jisyo = 1
let skk_keep_state = 1
let skk_egg_like_newline = 1
let skk_show_annotation = 1
let skk_use_face = 1

" sonictemplate-vim
let g:sonictemplate_vim_template_dir = [
      \ '~/.vim/sonictemplate'
      \]

" unite.vim
let g:unite_enable_start_insert=1

" watchdogs.vim
let g:quickrun_config['watchdogs_checker/_'] = {
      \   'outputter/quickfix/open_cmd': '',
      \   'hook/echo/enable': 1,
      \   'hook/echo/output_success': 'Watchdog went away.'
      \ }

let g:quickrun_config['cpp/watchdogs_checker'] = {
      \   'type' : 'watchdogs_checker/clang++',
      \   'cmdopt' : '-std=c++14',
      \ }

let g:watchdogs_check_CursorHold_enable = 1

" yankround.vim
nmap p <Plug>(yankround-p)
xmap p <Plug>(yankround-p)
nmap P <Plug>(yankround-P)
nmap gp <Plug>(yankround-gp)
xmap gp <Plug>(yankround-gp)
nmap gP <Plug>(yankround-gP)
nmap yp <Plug>(yankround-prev)
nmap yn <Plug>(yankround-next)
command! YankHistory :Unite yankround
"--- language

" C++

" PAS, PASXX
augroup FiletypePASXX
  au Filetype pasm,pasxx NeoCompleteLock
augroup END

" Scheme
set lispwords=define-module,define,define-macro,define-syntax,syntax-case,syntax-rules,let1,receive,if,cond,lambda,case


if filereadable(expand('~/.vimrc.local'))
  source ~/.vimrc.local
endif
