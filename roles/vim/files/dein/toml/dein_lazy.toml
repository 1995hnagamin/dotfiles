[[plugins]]
repo = 'airblade/vim-gitgutter'
on_event = ['FocusLost', 'CursorHold']

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'
on_event = ['FocusLost', 'CursorHold']
hook_post_source = '''
" trailing-whitespace.txt {{{1
let g:extra_whitespace_ignored_filetypes = [
            \ 'ref-webdict',
            \ 'ref-rfc',
            \ 'unite'
            \ ]
" End trailing-whitespace.txt }}}1
'''

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']
on_event = ['FocusLost', 'CursorHold']

[[plugins]]
repo = 'cohama/vim-hier'
on_cmd = [
  'HierStart',
  'HierStop',
  'HierUpdate',
  'HierClear'
]

[[plugins]]
repo = 'cohama/vim-smartinput-endwise'
depends = ['smartinput']
on_i = 1
hook_post_source = '''
call smartinput_endwise#define_default_rules()
'''

[[plugins]]
repo = 'ciaranm/detectindent'
on_cmd = [
  'DetectIndent'
]

[[plugins]]
repo = 'dannyob/quickfixstatus'

[[plugins]]
repo = 'haya14busa/incsearch.vim'
on_map = [
  '<Plug>(incsearch-forward)',
  '<Plug>(incsearch-backward)',
  '<Plug>(incsearch-stay)'
]

[[plugins]]
repo = 'haya14busa/vim-asterisk'
on_map = [
  '<Plug>(asterisk-z*)',
  '<Plug>(asterisk-z#)',
  '<Plug>(asterisk-gz*)',
  '<Plug>(asterisk-gz#)'
]

# [[plugins]]
# repo = 'JuliaEditorSupport/julia-vim'
# on_ft = ['julia']
# on_event = ['FocusLost', 'CursorHold']

[[plugins]]
repo = 'jvoorhis/coq.vim'
on_ft = ['coq']
on_event = ['FocusLost', 'CursorHold']

[[plugins]]
repo = 'kana/vim-filetype-haskell'
on_ft = ['haskell']
on_event = ['FocusLost', 'CursorHold']

[[plugins]]
repo = 'kana/vim-smartinput'
on_i = 1

[[plugins]]
repo = 'kchmck/vim-coffee-script'
on_ft = ['coffee']
on_event = ['FocusLost', 'CursorHold']

[[plugins]]
repo = 'Konfekt/FastFold'

[[plugins]]
repo = 'LeafCage/yankround.vim'
on_map = [
  '<Plug>(yankround-gp)',
  '<Plug>(yankround-gP)',
  '<Plug>(yankround-p)',
  '<Plug>(yankround-P)',
  '<Plug>(yankround-prev)',
  '<Plug>(yankround-next)'
]

[[plugins]]
repo = 'def-lkb/ocp-indent-vim'
on_ft = ['ocaml']
on_i = 1

[[plugins]]
repo = 'mattn/emmet-vim'
on_i = 1

[[plugins]]
repo = 'mattn/sonictemplate-vim'
on_cmd = ['Template']
hook_post_source = '''
" sonictemplate-vim {{{2
let g:sonictemplate_vim_template_dir = [
            \ '~/.vim/sonictemplate'
            \]
"End sonictemplate-vim }}}2
'''

[[plugins]]
repo = 'mattn/webapi-vim'
on_event = ['FocusLost', 'CursorHold']

[[plugins]]
repo = 'mattn/wwwrenderer-vim'
on_event = ['FocusLost', 'CursorHold']

[[plugins]]
repo = 'osyo-manga/shabadou.vim'
on_event = ['FocusLost', 'CursorHold']

[[plugins]]
repo = 'osyo-manga/vim-watchdogs'
depends = [
  'vim-quickrun',
  'vimproc.vim',
  'shabadou.vim',
  'vim-hier'
]
on_cmd = [
  'WatchdogsRun'
]
hook_post_source = '''
" watchdogs.vim {{{1
let g:quickrun_config['watchdogs_checker/_'] = {
            \   'outputter/quickfix/open_cmd': '',
            \   'hook/echo/enable': 1,
            \   'hook/copen/enable_exist_data' : 1,
            \   'hook/echo/output_success': 'Watchdog went away.'
            \ }

let g:quickrun_config['cpp/watchdogs_checker'] = {
            \   'type' : 'watchdogs_checker/clang++',
            \   'cmdopt' : '-std=c++14 -Wall',
            \ }

let g:watchdogs_check_BufWritePost_enable = 1
let g:watchdogs_check_BufWritePost_enables = {
            \   'cpp' : 0
            \ }

let g:watchdogs_check_CursorHold_enable = 1
let g:watchdogs_check_CursorHold_enables = {
            \   'cpp' : 0
            \ }

call watchdogs#setup(g:quickrun_config)

"End watchdogs.vim }}}1
'''

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown']
on_event = ['FocusLost', 'CursorHold']

[[plugins]]
repo = 'rhysd/unite-n3337'
depends = ['unite.vim']
on_ft = ['cpp']
on_event = ['FocusLost', 'CursorHold']

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = ['rust']
on_event = ['FocusLost', 'CursorHold']

[[plugins]]
repo = 'Shougo/unite-outline'
on_event = ['FocusLost', 'CursorHold']
depends = ['unite.vim']

[[plugins]]
repo = 'Shougo/unite.vim'
on_cmd = [
  'Unite'
]
hook_post_source = '''
let g:unite_enable_start_insert=1
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
let g:dein#plugin.build = 'make'
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_post_source = '''
" quickrun.vim {{{1

let g:quickrun_config = {
            \   'make' : {
            \       'command'   : 'make',
            \       'exec' : '%c %o',
            \       'outputter' : 'error:buffer:quickfix',
            \       'runner' : 'vimproc',
            \   },
            \}

"End quickrun.vim }}}1
'''

[[plugins]]
repo = 'thinca/vim-ref'
hook_post_source = '''
" ref.vim {{{1
let g:ref_man_cmd = "man -P cat"
let g:ref_man_lang = "C"

let g:ref_source_webdict_sites = {
            \ 'dictionary_com': {
            \     'url': 'http://www.dictionary.com/browse/%s',
            \ },
            \ 'wiktionary': {
            \   'url': 'http://en.wiktionary.org/wiki/%s',
            \   'keyword_encoding': 'utf-8',
            \   'cache': 1,
            \ },
            \ 'default': 'dictionary_com',
            \}
let g:ref_source_webdict_cmd = "=wwwrenderer#render('%s')"

function! g:ref_source_webdict_sites.dictionary_com.filter(output)
    let split_horizon = 2
    let lines = []
    let split_counter = 0
    for line in split(a:output, "\n")[90:]
        let line = substitute(line, "\\s\\+$", "", "")
        if !empty(line)
            let split_counter = 0
            call add(lines, line)
        elseif split_horizon > split_counter
            let split_counter = split_counter + 1
            call add(lines, line)
        endif
    endfor
    return join(lines, "\n")
endfunction

function! g:ref_source_webdict_sites.wiktionary.filter(output)
  return join(split(a:output, "\n")[18 :], "\n")
endfunction

nnoremap <Space>d :call ref#jump("normal", "webdict")<CR>

" End ref.vim }}}1
'''

[[plugins]]
repo = 'tpope/vim-fugitive'
on_event = ['FocusLost', 'CursorHold']

[[plugins]]
repo = 'tpope/vim-surround'
on_event = ['FocusLost', 'CursorHold']

[[plugins]]
repo = 'vim-scripts/AnsiEsc.vim'
on_cmd = [
  'AnsiEsc',
  'AnsiEsc!'
]

[[plugins]]
repo = 'vim-scripts/Gundo'
on_event = ['FocusLost', 'CursorHold']

[[plugins]]
repo = 'vim-scripts/mru.vim'

[[plugins]]
repo = 'vim-scripts/project.tar.gz'
on_cmd = ['Project']

[[plugins]]
repo = 'vim-scripts/vim-auto-save'
on_event = ['FocusLost', 'CursorHold']

