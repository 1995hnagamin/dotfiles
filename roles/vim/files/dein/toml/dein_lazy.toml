[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'
hook_post_source = '''
" trailing-whitespace.txt {{{1
let g:extra_whitespace_ignored_filetypes = [
            \ 'ref-webdict',
            \ 'ref-rfc'
            \ ]
" End trailing-whitespace.txt }}}1
'''

[[plugins]]
repo = 'cohama/vim-hier'

[[plugins]]
repo = 'ciaranm/detectindent'

[[plugins]]
repo = 'dannyob/quickfixstatus'

[[plugins]]
repo = 'haya14busa/incsearch.vim'
on_map = [
  '<Plug>(incsearch-forward)',
  '<Plug>(incsearch-backward)',
  '<Plug>(incsearch-stay)'
]

[[plugins]]
repo = 'haya14busa/vim-asterisk'
on_map = [
  '<Plug>(asterisk-z*)',
  '<Plug>(asterisk-z#)',
  '<Plug>(asterisk-gz*)',
  '<Plug>(asterisk-gz#)'
]

[[plugins]]
repo = 'itchyny/lightline.vim'
on_event = ['VimEnter']
hook_add = '''
" lightline {{{1
let g:lightline = {
            \ 'colorscheme': 'wombat',
            \ 'active': {
            \   'left': [ ['mode', 'paste'],
            \             ['readonly'] ]
            \ },
            \ 'component': {
            \   'readonly': '%{&readonly?"RO":""}',
            \ },
            \ 'component_visible_condition': {
            \   'readonly': '(&filetype!="help"&& &readonly)',
            \ },
            \ 'separator': { 'left':'','right':'' },
            \ 'subseparator': { 'left':'','right':'' },
            \ }
set laststatus=2
" End lightline }}}1
'''

[[plugins]]
repo = 'kana/vim-smartinput'
on_i = 1

[[plugins]]
repo = 'Konfekt/FastFold'

[[plugins]]
repo = 'LeafCage/yankround.vim'
on_map = [
  '<Plug>(yankround-gp)',
  '<Plug>(yankround-gP)',
  '<Plug>(yankround-p)',
  '<Plug>(yankround-P)',
  '<Plug>(yankround-prev)',
  '<Plug>(yankround-next)',
  '<Plug>(yankround-gp)',
  '<Plug>(yankround-p)'
]

[[plugins]]
repo = 'mattn/emmet-vim'
on_i = 1

[[plugins]]
repo = 'mattn/sonictemplate-vim'

[[plugins]]
repo = 'osyo-manga/vim-watchdogs'
hook_post_source = '''
" watchdogs.vim {{{1
let g:quickrun_config['watchdogs_checker/_'] = {
            \   'outputter/quickfix/open_cmd': '',
            \   'hook/echo/enable': 1,
            \   'hook/echo/output_success': 'Watchdog went away.'
            \ }

let g:quickrun_config['cpp/watchdogs_checker'] = {
            \   'type' : 'watchdogs_checker/clang++',
            \   'cmdopt' : '-std=c++14 -Wall',
            \ }

let g:watchdogs_check_BufWritePost_enable = 1
let g:watchdogs_check_BufWritePost_enables = {
            \   'cpp' : 0
            \ }

let g:watchdogs_check_CursorHold_enable = 1
let g:watchdogs_check_CursorHold_enables = {
            \   'cpp' : 0
            \ }

call watchdogs#setup(g:quickrun_config)

"End watchdogs.vim }}}1
'''

[[plugins]]
repo = 'Shougo/neocomplete.vim'
on_i = 1
hook_post_source = '''
" neocomplete {{{2
if has('lua')
    let g:neocomplete#enable_at_startup = 1
    let g:neocomplete#enable_ignore_case = 1
    let g:neocomplete#enable_smart_case = 1
    let g:neocomplete#max_list = 8
    let g:neocomplete#min_keyword_length = 3
    if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns = {}
    endif
    let g:neocomplete#keyword_patterns._ = '\h\w*'
    inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"
    inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
    if !exists('g:neocomplete#sources#omni#input_patterns')
        let g:neocomplete#sources#omni#input_patterns = {}
    endif
    let g:neocomplete#sources#omni#input_patterns.tex = '\\ref{\s*[0-9A-Za-z_:]*'
endif
"End neocomplete }}}2
'''

[[plugins]]
repo = 'Shougo/unite.vim'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_post_source = '''
" quickrun.vim {{{1

let g:quickrun_config = {
            \   'make' : {
            \       'command'   : 'make',
            \       'exec' : '%c %o',
            \       'outputter' : 'error:buffer:quickfix',
            \       'runner' : 'vimproc',
            \   },
            \}

"End quickrun.vim }}}1
'''

[[plugins]]
repo = 'thinca/vim-ref'
hook_post_source = '''
" ref.vim {{{1
let g:ref_man_cmd = "man -P cat"
let g:ref_man_lang = "C"

let g:ref_source_webdict_sites = {
            \ 'dictionary_com': {
            \     'url': 'http://www.dictionary.com/browse/%s',
            \ },
            \ 'wiktionary': {
            \   'url': 'http://en.wiktionary.org/wiki/%s',
            \   'keyword_encoding': 'utf-8',
            \   'cache': 1,
            \ },
            \ 'default': 'dictionary_com',
            \}
let g:ref_source_webdict_cmd = "=wwwrenderer#render('%s')"

function! g:ref_source_webdict_sites.dictionary_com.filter(output)
    let split_horizon = 2
    let lines = []
    let split_counter = 0
    for line in split(a:output, "\n")[90:]
        let line = substitute(line, "\\s\\+$", "", "")
        if !empty(line)
            let split_counter = 0
            call add(lines, line)
        elseif split_horizon > split_counter
            let split_counter = split_counter + 1
            call add(lines, line)
        endif
    endfor
    return join(lines, "\n")
endfunction

function! g:ref_source_webdict_sites.wiktionary.filter(output)
  return join(split(a:output, "\n")[18 :], "\n")
endfunction

nnoremap <Space>d :call ref#jump("normal", "webdict")<CR>

" End ref.vim }}}1
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'vim-scripts/AnsiEsc.vim'

[[plugins]]
repo = 'vim-scripts/Gundo'

[[plugins]]
repo = 'vim-scripts/mru.vim'

[[plugins]]
repo = 'vim-scripts/project.tar.gz'
on_cmd = ['Project']

[[plugins]]
repo = 'vim-scripts/vim-auto-save'

