# zsh
autoload -Uz colors
colors
PROMPT='%F{green}[%c@%m]%f '

HISTSIZE=5000
SAVEHIST=50000
HISTTIMEFORMAT='%Y-%m-%dT%H:%M:%S'
HISTFILE=${HOME}/.zsh_history
PATH=$HOME/local/bin:$PATH
setopt EXTENDED_HISTORY
setopt hist_no_store
setopt hist_reduce_blanks
setopt share_history

alias ls='ls --color'
alias g11='g++ --std=c++11 -Wall -O2'
alias gosh='rlwrap gosh'
alias ocaml='rlwrap ocaml'
alias rm=gomi
alias vim='vim -p'

autoload -U compinit && compinit
export TERM=screen-256color

case "$TERM" in
  "screen" ) export LANG=ja_JP.utf8 ;;
  "xterm"  ) export LANG=ja_JP.utf8 ;;
  "xterm-256color"  ) export LANG=ja_JP.utf8 ;;
  "screen-256color"  ) export LANG=ja_JP.utf8 ;;
  "linux"  ) export LANG=C ;;
  * ) export LANG=C ;;
esac

# tmux 
## start tmux on startup of zsh
function is_exists() { type "$1" >/dev/null 2>&1; return $?; }
function is_osx() { [[ $OSTYPE == darwin* ]]; }
function is_screen_running() { [ ! -z "$STY" ]; }
function is_tmux_runnning() { [ ! -z "$TMUX" ]; }
function is_screen_or_tmux_running() { is_screen_running || is_tmux_runnning; }
function shell_has_started_interactively() { [ ! -z "$PS1" ]; }
function is_ssh_running() { [ ! -z "$SSH_CONECTION" ]; }

function tmux_automatically_attach_session()
{
    if is_screen_or_tmux_running; then
        ! is_exists 'tmux' && return 1

        if is_tmux_runnning; then
            echo `fortune`
        elif is_screen_running; then
            echo "This is on screen."
        fi
    else
        if shell_has_started_interactively && ! is_ssh_running; then
            if ! is_exists 'tmux'; then
                echo 'Error: tmux command not found' 2>&1
                return 1
            fi

            if tmux has-session >/dev/null 2>&1 && tmux list-sessions | grep -qE '.*]$'; then
                # detached session exists
                tmux list-sessions
                echo -n "Tmux: attach? (y/N/num) "
                read
                if [[ "$REPLY" =~ ^[Yy]$ ]] || [[ "$REPLY" == '' ]]; then
                    tmux attach-session
                    if [ $? -eq 0 ]; then
                        echo "$(tmux -V) attached session"
                        return 0
                    fi
                elif [[ "$REPLY" =~ ^[0-9]+$ ]]; then
                    tmux attach -t "$REPLY"
                    if [ $? -eq 0 ]; then
                        echo "$(tmux -V) attached session"
                        return 0
                    fi
                fi
            fi

            if is_osx && is_exists 'reattach-to-user-namespace'; then
                # on OS X force tmux's default command
                # to spawn a shell in the user's namespace
                tmux_config=$(cat $HOME/.tmux.conf <(echo 'set-option -g default-command "reattach-to-user-namespace -l $SHELL"'))
                tmux -f <(echo "$tmux_config") new-session && echo "$(tmux -V) created new session supported OS X"
            else
                tmux new-session && echo "tmux created new session"
            fi
        fi
    fi
}

# Common Lisp
alias sbcl='rlwrap sbcl'

# Go (golang)
# export GOROOT=$HOME/.go
# export GOBIN=$GOROOT/bin
export GOPATH=$HOME/.gopath
export PATH=$PATH:$HOME/.go/bin:$GOPATH/bin

# Haskell
export PATH=$HOME/.cabal/bin:$PATH

# Node
export NVM_DIR=$HOME/.nvm
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm

# OCaml

# Perl
PATH="/home/ciconia/perl5/bin${PATH+:}${PATH}"; export PATH;
PERL5LIB="/home/ciconia/perl5/lib/perl5${PERL5LIB+:}${PERL5LIB}"; export PERL5LIB;
PERL_LOCAL_LIB_ROOT="/home/ciconia/perl5${PERL_LOCAL_LIB_ROOT+:}${PERL_LOCAL_LIB_ROOT}"; export PERL_LOCAL_LIB_ROOT;
PERL_MB_OPT="--install_base \"/home/ciconia/perl5\""; export PERL_MB_OPT;
PERL_MM_OPT="INSTALL_BASE=/home/ciconia/perl5"; export PERL_MM_OPT;

# python
export PYENV_ROOT="${HOME}/.pyenv"
if [ -d "${PYENV_ROOT}" ]; then
  export PATH=${PYENV_ROOT}/bin:$PATH
  eval "$(pyenv init -)"
fi
PATH=~/.local/bin:$PATH

# Ruby
export GEM_HOME=$HOME/.local/lib/gems
export PATH=$HOME/.local/lib/gems/bin:$PATH
export PATH=$HOME/.gem/ruby/2.1.0/bin:$PATH

source ~/.zshrc.local

### Added by the Heroku Toolbelt
export PATH="/usr/local/heroku/bin:$PATH"
